var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { get } = require('got');
const moment = require('moment');
const cheerio = require('cheerio');
const cityTimezones = require('city-timezones');

require('moment-timezone');
const DEFAULT_TIMEZONE = 'America/New_York';
moment.tz.setDefault(DEFAULT_TIMEZONE);

let $; // cheerio will be initialized with the html body

let baseUrl = 'http://www.livesoccertv.com/teams';

const splitTimezone = tz => tz.split('/');
const urlifyTimezone = tz => tz.replace('/', '%2F');
const getCountry = (city, tz) => {
  const cities = cityTimezones.lookupViaCity(city);
  for (const c of cities) {
    if (c.timezone === tz) {
      return c;
    }
  }
  return cities[0];
};

const badCountryCodes = {
  'ESP': 'ES',
  'USA': 'US',
  'GBR': 'UK',
  'RUS': 'RU'
};

const badLangCodes = {
  'us': 'en',
  'gb': 'en'
};

const fixCountryCode = country => {
  for (const bad in badCountryCodes) {
    country = country.replace(bad, badCountryCodes[bad]);
  }

  return country;
};

const fixLangCode = lang => {
  for (const bad in badLangCodes) {
    lang = lang.replace(bad, badLangCodes[bad]);
  }

  return lang;
};

const getBody = (() => {
  var _ref = _asyncToGenerator(function* ({ country, team, timezone }) {
    const url = getTeamUrl(country, team);
    const [continent, city] = splitTimezone(timezone);
    let { iso3: countryCode, iso2: lang } = getCountry(city.replace('_', ' '), timezone);
    lang = lang.toLowerCase();
    lang = fixLangCode(lang);
    countryCode = fixCountryCode(countryCode);
    const locale = `${lang}_${countryCode}`;

    const Cookie = `live=live; u_scores=on; u_continent=${continent}; u_country=${country}; u_country_code=${countryCode}; u_timezone=${urlifyTimezone(timezone)}; u_lang=${lang}; u_locale=${locale}`;
    const headers = { Cookie };

    return (yield get(url, { headers })).body;
  });

  return function getBody(_x) {
    return _ref.apply(this, arguments);
  };
})();
const getTeamUrl = (country, team) => `${baseUrl}/${country}/${team}`;

const adjustLocalTime = (time, timezone) => {
  const resultDate = moment(time, 'hh:mm').clone().tz(timezone).format('LT');

  return resultDate !== 'Invalid date' ? resultDate : time;
};

const parseLive = n => $('tr.matchrow').eq(n).attr('class').includes('livematch');
const parsePlayed = n => $('tr.matchrow > td.livecell > span').eq(n).attr('class') === 'narrow ft';
const parseCompetition = n => $('tr.matchrow > td.compcell > a').eq(n).attr('title');
const parseDate = n => $('tr.matchrow > td.datecell > a > span').eq(n).text();
const parseTime = n => $('tr.matchrow > td.timecell').eq(n).find('span').eq(2).text();
const parseGame = n => $('tr.matchrow > td.timecell').next('td').eq(n).find('a').text();

const parseTvs = n => {
  const tvs = [];
  $('tr.matchrow > td[width="240"]').eq(n).find('a').each((i, el) => {
    tvs.push($(el).text());
  });
  return tvs;
};

const filterTvs = tv => tv && !tv.includes('â€¦');

const convertObjectsToArray = objects => {
  const array = [];
  objects.map((i, o) => array.push(o));
  return array;
};

class Match {
  constructor(n) {
    this.live = parseLive(n);
    this.played = parsePlayed(n);
    this.competition = parseCompetition(n);
    this.date = parseDate(n);
    this.time = parseTime(n);
    this.game = parseGame(n);
    this.tvs = parseTvs(n);
    this.tvs = this.tvs.filter(filterTvs);
  }
}

const parseMatchesFromHtml = (body, timezone = DEFAULT_TIMEZONE) => {
  $ = cheerio.load(body);
  const matchRows = $('tr.matchrow');

  let matches = matchRows.map(i => new Match(i));
  matches = convertObjectsToArray(matches);
  matches = matches.filter(m => m.tvs.length !== 0);

  matches = matches.map(m => _extends({}, m, {
    time: adjustLocalTime(m.time, timezone)
  }));

  return matches;
};

module.exports = (() => {
  var _ref2 = _asyncToGenerator(function* (country, team, options = {}) {
    const timezone = options.timezone || DEFAULT_TIMEZONE;
    const body = yield getBody({ country, team, timezone });
    const matches = parseMatchesFromHtml(body, timezone);

    return matches;
  });

  return function (_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
})();

module.exports.parseMatchesFromHtml = parseMatchesFromHtml;
